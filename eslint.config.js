const babelParser = require('@babel/eslint-parser');

module.exports = [ {
    languageOptions: {
        ecmaVersion: 'latest',
        sourceType: 'module',
        parser: babelParser,
        parserOptions: {
            requireConfigFile: false,
            plugins: [
                [ '@babel/plugin-proposal-decorators', { version: '2022-03' } ],
                '@babel/plugin-syntax-import-assertions',
            ],
            babelOptions: {
                babelrc: false,
                configFile: false,
                plugins: [
                    [ '@babel/plugin-proposal-decorators', { version: '2022-03' } ],
                    '@babel/plugin-syntax-import-assertions',
                ],
            },
        },
    },
    rules: {
        'array-bracket-spacing': [ 'error', 'always' ],
        'array-callback-return': 'error',
        'block-spacing': [ 'error', 'always' ],
        'brace-style': [ 'error', '1tbs' ],
        'capitalized-comments': [ 'error', 'always', { 'ignoreInlineComments': true } ],
        'class-methods-use-this': 'off',
        'comma-dangle': [ 'error', {
            'arrays': 'always-multiline',
            'objects': 'always-multiline',
            'functions': 'ignore',
        } ],
        'comma-spacing': [ 'error', {
            'after': true,
        } ],
        'comma-style': 'error',
        'computed-property-spacing': [ 'error', 'never' ],
        'constructor-super': 'error',
        'curly': [ 'error', 'all' ],
        'eol-last': 'error',
        'generator-star-spacing': [ 'error', {
            'before': true,
            'after': true,
        } ],
        'key-spacing': [ 'error', {
            'beforeColon': false,
            'afterColon': true,
        } ],
        'indent': [ 'error', 4, {
            'SwitchCase': 1,
        } ],
        'init-declarations': 'off',
        'new-parens': 'error',
        'no-caller': 'error',
        'no-case-declarations': 'error',
        'no-dupe-class-members': 'error',
        'no-duplicate-imports': 'error',
        'no-else-return': 'warn',
        'no-fallthrough': 'warn',
        'no-implicit-globals': 'error',
        'no-iterator': 'error',
        'no-mixed-spaces-and-tabs': 'error',
        'no-multi-spaces': 'error',
        'no-multiple-empty-lines': 'error',
        'no-new': 'error',
        'no-new-symbol': 'error',
        'no-new-wrappers': 'error',
        'no-proto': 'error',
        'no-redeclare': 'error',
        'no-restricted-properties': 'error',
        'no-tabs': 'error',
        'no-template-curly-in-string': 'off',
        'no-this-before-super': 'error',
        'no-throw-literal': 'error',
        'no-trailing-spaces': 'error',
        'no-unused-expressions': 'error',
        'no-unused-vars': 'error',
        'no-useless-constructor': 'error',
        'no-useless-return': 'off',
        'no-var': 'error',
        'no-void': 'error',
        'no-warning-comments': 'off',
        'no-with': 'error',
        'prefer-const': [ 'error', {'destructuring': 'all'} ],
        'prefer-promise-reject-errors': 'error',
        'prefer-rest-params': 'error',
        'prefer-spread': 'error',
        'quotes': [ 'error', 'single' ],
        'semi': [ 'error', 'always' ],
        'sort-imports': 'error',
        'spaced-comment': [ 'error', 'always' ],
        'unicode-bom': 'error',
        'wrap-iife': 'error',
        'yield-star-spacing': [ 'error', {
            'before': true,
            'after': true,
        } ],
        'yoda': [ 'error', 'always' ],
    },
}, {
    files: [ '**/test/**/*.js' ],
    rules: {
        'no-new': 'off',
        'no-new-wrappers': 'off',
        'no-unused-expressions': 'off',
    },
}, {
    files: [ 'src/Component/DateTime/data/**/*.js' ],
    rules: {
        'no-unused-vars': 'off',
    },
}, {
    ignores: [
        'src/Bundle/FrameworkBundle/fixtures/Controller/TypedController.js',
        'src/Bundle/FrameworkBundle/src/Controller/ExceptionController.js',
        'src/Component/Autoloader/fixtures/**/*',
        'src/Component/Debug/src/Resources/**/*',
        'src/Component/DependencyInjection/fixtures/**/*',
        'src/Component/HttpServer/fixtures/**/*',
        'src/Component/Metadata/fixtures/**/*',
        'src/Component/Messenger/fixtures/**/*',
        'src/Component/Messenger/test/DependencyInjection/MessengerPassTest.js',
        'src/Component/Templating/fixtures/**/*',
        'src/Component/VarExporter/fixtures/**/*',
        'src/**/*Interface.js',
    ],
} ];
